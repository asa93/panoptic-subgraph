type PanopticPool @entity {
  id: ID! #poolAddress
  poolAddress: Bytes! # address
  uniSwapPool: Bytes! # address
  token0: String
  token1: String
  totalDepositToken0: BigInt
  totalDepositToken1: BigInt
  totalVolumeToken0: BigInt
  totalVolumeToken1: BigInt
}

# Data accumulated and condensed into day stats for each pool
type PanopticPoolDayData @entity {
  id: ID! #poolAddress
  totalVolumeToken0: BigInt
}

type User @entity {
  id: ID! # userAddress
}

type TokenPosition @entity {
  id: ID! # tokenId+ userAddress
  user: User! # user entity
  tokenId: BigInt! # tokenId uint256
  position: BigInt # number of contracts uint256
  endUser: String
}

type UserDeposit @entity {
  id: ID! #userAddress + poolAddress
  token0Deposit: BigInt
  token1Deposit: BigInt
  user: User
  poolAddress: String
}

type Token @entity {
  id: ID! #tokenAddress
  name: String
  symbol: String
  totalVolume: BigInt
}
# Data accumulated and condensed into day stats for each pool
type TokenDayData @entity {
  id: ID! #tokenAddress
  totalVolume: BigInt
}

#we have to track UniswapV3 prices to retrieve ETH/USD value
type UniswapV3Pool @entity {
  id: ID! # poolAddress
  token0: String!
  token1: String!
  token0price: String!
}
